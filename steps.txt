1. Call variables from ts files using string interpolation i.e. {{}}
2. Syntax for intializing a variable
    - nameofVariable:datatype = "" or nameofVariable:datatype;
    - you can  also intialize using a constructor.
    i.e.
    constructor() {
        this.nameofVariable = placevalue here , remember data type
      }
3. A class is a blueprint for object creation i.e. will define properties and methods that an object has access to when
created
ng generate new nameOfClass.
4. To use a class inside a component make sure you import it.
5. Another way of declaring and intializing variables is :
      - nameofVariable:className = place value according to constructor function in class e.g. on Goals component
6. Generate a component using the command : ng generate component componentName e.g Goals Component will handle all functionalities
in regard to goals.
7. When u create a component it's automatically registered in the app.module.ts
8. A component .ts file contains , imports , the @component declaration :with the properties =>
 selector: how the component is referred to in the root, template url : for html template and styles url : for styles of component,
9. Include a component to the root file using the selector tag of the component and placing it in the appcomponent.html file.
10. Parent / Child component relationship : is when one component as the root display(parent) for the other component (child)
11. Input property binding allows us to pass data from a parent component to its child components : e.g goal detail component
, receiving the description from the parent component which is the goal component.
 : define what you want passed at the @Input annotation.
12. Event binding : listening for events to base of actions on. e.g mouse click , etc. e.g
13. When we want a child component to communicate with a parent component,
 we make the child component emit an event that is taken up by the parent component.
14. An event emitter is Used in components with the @Output directive to emit custom events synchronously or asynchronously,
 and register handlers for those events by subscribing to an instance.
15. User initiated events : is basically the concept of allowing users to take control on execution of certain functionalities
through event based actions i.e. a click , a double click etc.
This is done via use of the HostListener used to define the events that will be initiated by user actions e.g. @ strikethrough.directive.ts
16. Add bootstrap using the command : $ npm install --save bootstrap popper then make it available globally in the project inside
the styles.css file.
17. Two way data binding : With two-way data binding, data moves from our template(the view)
to our component class(the model) and vice versa. The essence is that when data changes on the template(view)
it simultaneously changes in the component class(model) and if it also changes in the model,
the view is automatically updated with the changes.

The App.Module.ts file
BreakDown :
This file is the root module used by angular

: Services allow us to dedicate a class to work on a specific task
  Service example i.e. quote-request.service.ts
  generate a service using the cmd ng generate service serviceName
  After creating a service remember to register it; inorder to give access.
  Three ways of registering  a service

    In the metadata of the service ( in the @Injectable() decorator)
    In the @NgModule() decorator (inside the app.module file, provider declaration [nameofservice])
    In the @component() metadata (in the component where you want to inject the service, provider[nameofService])


: Dependency injection is the concept of including an class with the constructor of another class, so that the later class can use
the functionalities in class A to execute its own functionalities instead of creating new instances of class B.
  Services allow this concept in Angular

: HttpCLient : this module allows us to integrate API's in angular , ensure this module is declared in the root module of app ie. app.module.ts


Routing
In Angular, routing enables us to navigate from one view to another.
Example uses the navigation links to go to About component

-To implement routing in Angular, we use a module known as the AppRoutingModule.
-We import it and feed it with simple instructions in the form of code and it does the navigation for us.
-When you create an angular app , a routing module called app-routing.module is created
-If not present generate one using the command
  ng g module app-routing , inside app folder
- A typical Angular route has two properties, a path which is a string that matches the URL in the browser address bar
  and a component which is the component that the router should create when navigating to this route.
- RouterOutlet is a directive of the RoutingModule that has a selector <router-outlet> which handles routing for us.
   Let's use this selector and put the router in charge of displaying different views.
   Inside the app.component.html declare the <router-outlet></router-outlet> tags in place of default component
   also in the app.modulde.ts file, add the following in providers property
     providers: [{provide: APP_BASE_HREF, useValue: '/'}],
- when u create the routes and have links to take user to different pages here we use
  RouterLink  : e.g navbar component example



404 pages
example in not-found component


Passing parameters

